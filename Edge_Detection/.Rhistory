Performances in All Periods',
legend.loc = 'topleft'
)
Analyze_Portfolio_Return(
ts[Index_Expansion],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Expansion Periods'
)
# Recession
Analyze_Portfolio_Return(
ts[Index_Recession],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Recession Periods'
)
# MSRP mixed ------------------------------------------------------------
# Conditional number of Cov from all assets
print(kappa(cov(ts_5[Index_Recession])))
# therefore we need to cope with collinearity, adopting mixed portfolio
ts_Return_TP_mixed <- rbind(
# Expansion, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Expansion]
)$return_p[DateRange_10,],
# Recession, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Recession]
)$return_p[DateRange_10,],
# Expansion, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Expansion]
)$return_p[DateRange_5,],
# Recession, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Recession]
)$return_p[DateRange_5,]
)
colnames(ts_Return_TP_mixed) <- 'Mixed_TP'
# MVP mixed
ts_Return_MVP_mixed <- rbind(
# Expansion, "2009-06-30/2014-06-30"
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Expansion]
)$return_p[DateRange_10,],
# Recession, "2009-06-30/2014-06-30"
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Recession]
)$return_p[DateRange_10,],
# Expansion, "2009-06-30/2014-06-30"
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Expansion]
)$return_p[DateRange_5,],
# Recession, "2009-06-30/2014-06-30"
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Recession]
)$return_p[DateRange_5,]
)
colnames(ts_Return_MVP_mixed) <- 'Mixed_MVP'
#
ts <- merge(ts_Return_TP_mixed, ts_Return_TP, ts_Return_MVP_mixed, ts_Return_MVP)
Analyze_Portfolio_Return(
ts,
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in All Periods',
legend.loc = 'topleft'
)
# Recession
Analyze_Portfolio_Return(
ts[Index_Recession],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Recession Periods'
)
# Expansion
Analyze_Portfolio_Return(
ts[Index_Expansion],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Expansion Periods'
)
Analyze_Portfolio_Return(
ts,
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in All Periods',
legend.loc = 'topleft'
)
Analyze_Portfolio_Return(
ts[Index_Recession],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Recession Periods'
)
Analyze_Portfolio_Return(
ts[Index_Expansion],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Expansion Periods'
)
rm(ts_Return)
rm(ts)
Analyze_Portfolio_Return(
ts_Return[Index_Expansion],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Expansion Periods'
)
#
ts_Return <- merge(ts_Return_TP_mixed, ts_Return_TP, ts_Return_MVP_mixed, ts_Return_MVP)
Analyze_Portfolio_Return(
ts,
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in All Periods',
legend.loc = 'topleft'
)
Analyze_Portfolio_Return(
ts_Return,
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in All Periods',
legend.loc = 'topleft'
)
Analyze_Portfolio_Return(
ts_Return[Index_Expansion],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Expansion Periods'
)
Analyze_Portfolio_Return(
ts_Return[Index_Recession],
legend.loc = 'topleft',
fig.main = 'Mixed/Top-down/Bottom-up MSRP/MVP
Performances in Recession Periods'
)
DateRange_Recession
DateRange_5
weight_p
getwd()
save.image("~/Documents/Writers/UCSD/MGTF_490_Solution_revised/MGTF_490.RData")
citation('prophet')
?prophet
set.seed('fcctrain')
hash('fcctrain')
git2r::hash
git2r::hash('fcctrain')
SparkR::hash('fcctrain')
SparkR::sha2('fcctrain')
git2r::hash('fcctrain')
git2r::sha('fcctrain')
git2r::hash('fcctrain')
base::strtoi
base::strtoi('fcctrain')
base::strtoi(git2r::hash('fcctrain'))
git2r::hash('fcctrain')
base::strtoi(git2r::hash('fcctrain'))
base::strtoi(git2r::hash('fcctrain')/10000)
base::strtoi(git2r::hash('fcctrain'))
base::strtoi(git2r::hash('fcctrain')[1:10])
git2r::hash('fcctrain')
strtoi('badfc')
strtoi('badfc', 16)
base::strtoi(git2r::hash('fcctrain'), 16)
strtoi(git2r::hash('fcctrain'), 16)
strtoi(git2r::hash('fcctrain'), 36)
git2r::hash('fcctrain') %>% str
git2r::hash('fcctrain') %>% as.integer()
git2r::hash('fcctrain') %>% as.integer
hash(36101932)
git2r::hash(36101932)
git2r::hash('36101932')
citation('proph')
citation('prophet')
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(quantmod)
library(TTR)
library(PortfolioAnalytics)
library(prophet)
rm(list = ls())
setwd('/Users/chengt/Documents/Writers/UCSD/MGTF_490_Solution_revised/')
load('MGTF_490.RData')
# Missing Data Management (INT_Surp & GDP_Surp only) -----------------------
summary(ts_GDP_Surprise)
summary(ts_INT_Surprise)
# In order to employ the dataset as much as possible, missing data were imputed for GDP & INT, during which the prophet function from facebook was employed, with its briefing given below.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# https://facebook.github.io/prophet/
# Implements a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
Impute_TS_Prophet <- function(ts) {
set.seed(36101932)
ts_imputed <- data.frame(index(ts), ts)
colnames(ts_imputed) <- c('ds', 'y')
ts_prophet <- prophet(ts_imputed, mcmc.samples = 12, refresh = 0)
ts_prophet <- predict(ts_prophet, ts_imputed['ds'])
ts_imputed <- ts_imputed$y
ts_imputed[is.na(ts_imputed)] <- ts_prophet$yhat[is.na(ts_imputed)]
ts_imputed <- xts(ts_imputed, order.by = index(ts))
colnames(ts_imputed) <- paste0(colnames(ts), '_imp')
return(ts_imputed)
}
#
suppressWarnings({
ts_INT_Surprise_imp <- Impute_TS_Prophet(ts_INT_Surprise)
ts_GDP_Surprise_imp <- Impute_TS_Prophet(ts_GDP_Surprise)
})
# Review
par(mfrow=c(2,1))
xts::plot.xts(merge(ts_GDP_Surprise, ts_GDP_Surprise_imp), legend.loc = 'bottomright', main = 'Raw and Imputed Time Series Data')
xts::plot.xts(merge(ts_INT_Surprise, ts_INT_Surprise_imp), legend.loc = 'bottomright', main = 'Raw and Imputed Time Series Data')
# Initialization & MVP --------------------------------------------------------
Analyze_Portfolio_Return <- function(ts_Return, col = rich6equal, lwd = 3,
fig.main = NULL, legend.loc = NULL) {
# A general function for returns analysis
# repeatedly invocated in this study
charts.PerformanceSummary(ts_Return, col = col, lwd = lwd,
main = fig.main, legend.loc = legend.loc)
suppressWarnings({
print(table.AnnualizedReturns(ts_Return))
print(table.DownsideRisk(ts_Return))
print(table.DownsideRiskRatio(ts_Return))
})
}
#
Min_Variance_Portfolio <- function(seq_assets, ts_Return) {
# input available assets & returns,
# output minimum variance portfolio (MVP) returns & weights
seq_assets <- seq_assets[seq_assets%in%colnames(ts_Return)]
ts_Return <- ts_Return[, seq_assets]
Omega <- cov(ts_Return)
weight_p <- rowSums(solve(Omega)) / sum(colSums(solve(Omega)))
return_p <- rowSums(ts_Return * weight_p)
return_p <- xts(return_p, order.by = index(ts_Return))
return(
list(return_p = return_p, weight_p = weight_p)
)
}
# Set DateRange to separate 10/5 yrs
DateRange_10 <- '2009-06-30/2014-06-30'
DateRange_5 <- '2014-07-01/2019-06-30'
# Convert to percentage
ts_10_5 <- rbind(ts_10[DateRange_10,], ts_5[DateRange_5,])/100
colnames(ts_10_5) <- gsub('_10', '', colnames(ts_10))
Analyze_Portfolio_Return(ts_10_5, col = rich8equal,
fig.main = 'Portfolio Returns', legend.loc = 'topleft')
# Listing available assets pools
assets_Div_ROIC <- c('Div_10','ROIC_10','Div_5','ROIC_5','Div','ROIC')
assets_EBIT <- setdiff(c(colnames(ts_10), colnames(ts_5), colnames(ts_10_5)),
assets_Div_ROIC)
# MVP Construction
# One column for Div_ROIC (bottom-up) MVP, the other for EBIT (top-down) MVP
# Scale to percentage
ts_Return_MVP <- merge(
# Div_ROIC (bottom-up) MVP
# 10 yrs for "2009-06-30/2014-06-30", 5 yrs for "2014-07-01/2019-06-30"
rbind(
Min_Variance_Portfolio(seq_assets = assets_Div_ROIC,
ts_Return = ts_10)$return_p[DateRange_10,],
#
Min_Variance_Portfolio(seq_assets = assets_Div_ROIC,
ts_Return = ts_5)$return_p[DateRange_5,]
),
# EBIT (top-down) MVP
# 10 yrs for "2009-06-30/2014-06-30", 5 yrs for "2014-07-01/2019-06-30"
rbind(
Min_Variance_Portfolio(seq_assets = assets_EBIT,
ts_Return = ts_10)$return_p[DateRange_10,],
#
Min_Variance_Portfolio(seq_assets = assets_EBIT,
ts_Return = ts_5)$return_p[DateRange_5,]
)
)
ts_Return_MVP <- ts_Return_MVP/100
colnames(ts_Return_MVP) <- c('Div_ROIC_MVP', 'EBIT_MVP')
# Visualization of MVP with individual components -----------------------------
# Div_ROIC_MVP, bottom-up approach
seq_assets <- assets_Div_ROIC[assets_Div_ROIC%in%colnames(ts_10_5)]
ts_Div_ROIC <- merge.xts(ts_Return_MVP, ts_10_5[,seq_assets])
Analyze_Portfolio_Return(ts_Return = ts_Div_ROIC, col = rich6equal,
fig.main = 'Div & ROIC Portfolios Performances',
legend.loc = 'topleft')
# EBIT_MVP, top-down approach
seq_assets <- assets_EBIT[assets_EBIT%in%colnames(ts_10_5)]
ts_EBIT <- merge.xts(ts_Return_MVP, ts_10_5[,seq_assets])
Analyze_Portfolio_Return(ts_Return = ts_EBIT, col = rich8equal,
fig.main = 'EBIT Portfolios Performances',
legend.loc = 'topleft')
# Regression ----------------------------------------------------------------
ts <- merge(ts_Return_MVP,
ts_10_5[,c('Div','ROIC',
'EBIT_CnsmStpls','EBIT_CommServs',
'EBIT_HealthCare','EBIT_Ind',
'EBIT_IT','EBIT_Utlts')])
seq_Return <- colnames(ts)
names(seq_Return) <- seq_Return
# Vectorized processing of OLS & summary
list_model <- suppressWarnings(llply(
.data = seq_Return,
.fun = function(iter_Return) {
iter_formula <- as.formula(paste0(iter_Return, '~.'))
iter_model <- lm(iter_formula,
merge.xts(ts[,iter_Return],
ts_GDP_Surprise_imp, ts_INT_Surprise_imp))
cat('\n',
'############################################################',
'\n')
print(iter_formula)
print(summary(iter_model))
return(iter_model)
},
.progress = 'none'
))
# Visualization of NY Fed Recession/Expansion Periods, with MVP -----------
# Points with NYFRProb > 10 are taken as the center of recession periods
DateRange_Recession <- rle(as.numeric(NYFRProb > 10))
DateRange_Recession_end <- cumsum(DateRange_Recession$lengths)[
which(DateRange_Recession$values==1)]
DateRange_Recession_end <- index(NYFRProb)[DateRange_Recession_end] + 14
DateRange_Recession_start <- cumsum(DateRange_Recession$lengths)[
which(DateRange_Recession$values==0)] + 1
DateRange_Recession_start <- index(NYFRProb)[DateRange_Recession_start] - 15
#
par(mfrow = c(1,1))
xtsExtra::plot.xts(
ts_Return_MVP, screens=1,
blocks = list(
start.time = DateRange_Recession_start,
end.time = DateRange_Recession_end,
col = scales::alpha('firebrick1', alpha = .8)),
col = rich6equal, lwd = 3,
legend.loc = "bottomleft", auto.legend = TRUE,
main = "MVP Performances, with Recession Periods Marked")
# Indexing Recession & Expansion Periods
ts <- ts_Return_MVP[paste0(DateRange_Recession_start,'/',DateRange_Recession_end),]
Index_Recession <- index(ts)
Index_Expansion <- index(ts_Return_MVP)[!index(ts_Return_MVP)%in%Index_Recession]
#
# Visualization of MVP in Recession/Expansion Periods ---------------------
#
# ROIC & Div Portfolios
# Expansion
Analyze_Portfolio_Return(ts_Div_ROIC[Index_Expansion], legend.loc = 'topleft',
fig.main = 'Div & ROIC Portfolios in Expansion Periods')
# Recession
Analyze_Portfolio_Return(ts_Div_ROIC[Index_Recession], legend.loc = 'topleft',
fig.main = 'Div & ROIC Portfolios in Recession Periods')
#
# EBIT Portfolios
# Expansion
Analyze_Portfolio_Return(ts_EBIT[Index_Expansion],
legend.loc = 'topleft', col = rich8equal,
fig.main = 'EBIT Portfolios in Expansion Periods')
# Recession
Analyze_Portfolio_Return(ts_EBIT[Index_Recession],
legend.loc = 'topleft', col = rich8equal,
fig.main = 'EBIT Portfolios in Recession Periods')
# Tangency Portfolio (TP) Construction ---------------------------------
Tangency_Portfolio <- function(seq_assets, ts_Return) {
seq_assets <- seq_assets[seq_assets%in%colnames(ts_Return)]
ts_Return <- ts_Return[,seq_assets]
portfolio_tangency <- portfolio.spec(assets = seq_assets)
# Objectives, from mean & variance (std.dev.)
portfolio_tangency <- add.objective(portfolio = portfolio_tangency,
type = 'return', name = 'mean')
portfolio_tangency <- add.objective(portfolio = portfolio_tangency,
type = 'risk', name = 'StdDev')
# Constraints, sum(w_i)=1, w_i>=0
portfolio_tangency <- add.constraint(portfolio = portfolio_tangency,
type = 'full_investment')
portfolio_tangency <- add.constraint(portfolio = portfolio_tangency,
type = 'long_only')
#
portfolio_tangency <- optimize.portfolio(
R = ts_Return,
portfolio = portfolio_tangency,
optimize_method = 'ROI',
maxSR = TRUE
)
weight_p <- portfolio_tangency$weights
return_p <- rowSums(ts_Return * weight_p)
return_p <- xts(return_p, order.by = index(ts_Return))
return(
list(return_p = return_p, weights = weight_p)
)
}
ts_Return_TP <- merge(
# Div_ROIC, Min Variance Portfolio
# One for recession period, one for expansion period.
# 10 yrs for "2009-06-30/2014-06-30", 5 yrs for "2014-07-01/2019-06-30"
rbind(
# Expansion, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = assets_Div_ROIC,
ts_Return = ts_10[Index_Expansion]
)$return_p[DateRange_10,],
# Recession, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = assets_Div_ROIC,
ts_Return = ts_10[Index_Recession]
)$return_p[DateRange_10,],
# Expansion, "2014-07-01/2019-06-30"
Tangency_Portfolio(seq_assets = assets_Div_ROIC,
ts_Return = ts_5[Index_Expansion]
)$return_p[DateRange_5,],
# Recession, "2014-07-01/2019-06-30"
Tangency_Portfolio(seq_assets = assets_Div_ROIC,
ts_Return = ts_5[Index_Recession]
)$return_p[DateRange_5,]
),
# EBIT, Min Variance Portfolio & Tangency Portfolio Construction
# One for recession period, one for expansion period.
# 10 yrs for "2009-06-30/2014-06-30", 5 yrs for "2014-07-01/2019-06-30"
rbind(
# Expansion, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = assets_EBIT,
ts_Return = ts_10[Index_Expansion]
)$return_p[DateRange_10],
# Recession, "2009-06-30/2014-06-30"
Tangency_Portfolio(seq_assets = assets_EBIT,
ts_Return = ts_10[Index_Recession]
)$return_p[DateRange_10,],
# Expansion, "2014-07-01/2019-06-30"
Tangency_Portfolio(seq_assets = assets_EBIT,
ts_Return = ts_5[Index_Expansion]
)$return_p[DateRange_5,],
# Recession, "2014-07-01/2019-06-30"
Tangency_Portfolio(seq_assets = assets_EBIT,
ts_Return = ts_5[Index_Recession]
)$return_p[DateRange_5,]
)
)
colnames(ts_Return_TP) <- c('Div_ROIC_TP', 'EBIT_TP')
ts_Return_TP <- ts_Return_TP/100
# Visualization of TP in Expansion/Recession Periods ----------------------
# All Periods
ts_Return <- merge(ts_Return_MVP, ts_Return_TP)
Analyze_Portfolio_Return(ts_Return = ts_Return, legend.loc = 'topleft',
fig.main = 'MVP & TP Performances in All Periods')
# Expansion Only
Analyze_Portfolio_Return(ts_Return = ts_Return[Index_Expansion], legend.loc = 'topleft',
fig.main = 'MVP & TP Performances in Expansion Periods')
# Recession Only
Analyze_Portfolio_Return(ts_Return = ts_Return[Index_Recession], legend.loc = 'topleft',
fig.main = 'MVP & TP Performances in Recession Periods')
# Conditional number of Cov from all assets
print(kappa(cov(ts_5[Index_Recession])))
# TP Mixed ------------------------------------------------------------
# therefore we need to cope with collinearity, adopting mixed portfolio
ts_Return_TP_mixed <- rbind(
# 10 yrs, Expansion
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Expansion]
)$return_p[DateRange_10,],
# 10 yrs, Recession
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Recession]
)$return_p[DateRange_10,],
# 5 yrs, Expansion
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Expansion]
)$return_p[DateRange_5,],
# 5 yrs, Recession
Tangency_Portfolio(seq_assets = colnames(ts_Return_TP),
ts_Return = ts_Return_TP[Index_Recession]
)$return_p[DateRange_5,]
)
colnames(ts_Return_TP_mixed) <- 'Mixed_TP'
# MVP Mixed ------------------------------------------------------------
ts_Return_MVP_mixed <- rbind(
# 10 yrs, Expansion
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Expansion]
)$return_p[DateRange_10,],
# 10 yrs, Recession
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Recession]
)$return_p[DateRange_10,],
# 5 yrs, Expansion
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Expansion]
)$return_p[DateRange_5,],
# 5 yrs, Recession
Min_Variance_Portfolio(seq_assets = colnames(ts_Return_MVP),
ts_Return = ts_Return_MVP[Index_Recession]
)$return_p[DateRange_5,]
)
colnames(ts_Return_MVP_mixed) <- 'Mixed_MVP'
# Visualization of mixed/top-down/bottom-up TP/MVP in E/R Periods ----------------------
ts_Return <- merge(ts_Return_TP_mixed, ts_Return_TP, ts_Return_MVP_mixed, ts_Return_MVP)
Analyze_Portfolio_Return(
ts_Return,
fig.main = 'Mixed/Top-down/Bottom-up TP/MVP
Performances in All Periods',
legend.loc = 'topleft'
)
# Expansion
Analyze_Portfolio_Return(
ts_Return[Index_Expansion],
fig.main = 'Mixed/Top-down/Bottom-up TP/MVP
Performances in Expansion Periods',
legend.loc = 'topleft'
)
# Recession
Analyze_Portfolio_Return(
ts_Return[Index_Recession],
fig.main = 'Mixed/Top-down/Bottom-up TP/MVP
Performances in Recession Periods',
legend.loc = 'topleft'
)
head(ts_Return_TP)
