clipr::read_clip_tbl(sep = ',')
clipr::write_clip(
clipr::read_clip_tbl(sep = ',')
)
clipr::write_clip(
clipr::read_clip_tbl(sep = ',')
)
clipr::write_clip(
clipr::read_clip_tbl(sep = ',')
)
source('~/Documents/OCT_Scan/Edge_Detection/Edge_Detection.R', echo=TRUE)
sin(x)
img.sample <- readImage(
"/Users/chengt/Documents/OCT_Scan/14.tif"
)
library("EBImage")
img.sample <- readImage(
"/Users/chengt/Documents/OCT_Scan/14.tif"
)
image(img.sample)
dim(img.sample)
View(img.sample)
display(img.sample)
plot(colMeans(img.sample))
img.sample <- readImage(
"/Volumes/Seagate_Backup/OCT_Scan_PreProcessing/MBR_1_2D/2D for terry/130.tif"
)
display(img.sample)
img.median <- medianFilter(img.sample, 1)
display(img.median)
fhi <- matrix(1, nrow = 3, ncol = 3)
fhi[2, 2] <- -7.5
display(filter2(x = img.median, filter = fhi))
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
# img.median <- img.median[]
attr(img.median, 'bits.per.sample') <- 32
attr(img.median, 'samples.per.pixel') <- 1
img.median <- resize(img.median, w = 1000)
image(edge.detect(img.median))
image(edge.detect(img.median, method = 'Sobel'))
ans <- edge.detect(img.median, method = 'Sobel')
dim(ans) # 664, 156
{
nmask = thresh(img.median, w=10, h=10, offset=0.01)
# nmask = opening(nmask, makeBrush(5, shape='disc'))
# nmask = opening(nmask, makeBrush(5, shape='box'))
nmask = opening(nmask, makeBrush(5, shape='diamond'))
nmask = fillHull(nmask)
nmask = bwlabel(nmask)
display(nmask, all = T)
}
ctmask = opening(img.median>.7, makeBrush(5, shape='disc'))
cmask = propagate(img.median, seeds=nmask, mask=ctmask)
display(ctmask, all=TRUE)
segmented = paintObjects(cmask, img.median, col='#ff00ff')
segmented = paintObjects(nmask, segmented, col='#ffff00')
display(segmented, all=TRUE)
sum(ans>quantile(ans, .99))
nuc = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(nuc, method = "raster", all = TRUE)
otsu(nuc)
threshold = otsu(nuc)
threshold
nuc_th <- combine(
mapply(function(frame, th) frame > th, getFrames(nuc), threshold, SIMPLIFY=FALSE)
)
display(nuc_th, all=TRUE)
# build a filter from 1750 to 666, take average for linear purpose.
plot(c(ans[,1]))
plot(c(img.sample[,1]))
dim(img.sample) # 1750 , 725
lines(lowess(img.sample[,1], f = .3))
try_local <- img.sample[1:3,]
plot(colMeans(try_local))
lines(lowess(colMeans(try_local), f = .3))
plot(colMeans(nmask[,]))
plot(colMeans(nmask[90:100,]))
plot(nmask)
image(nmask)
image(ctmask)
source('~/Documents/OCT_Scan/OCT_function_utils.R', echo=TRUE)
setwd('/Users/chengt/Documents/OCT_Scan/')
load("/Users/chengt/Documents/OCT_Scan/OCT_Thickness.RData")
source('/Users/chengt/Documents/OCT_Scan/OCT_function_utils.R')
source('~/Documents/OCT_Scan/OCT_function_utils.R', echo=TRUE)
source('~/Documents/OCT_Scan/OCT_MAT_Img.R', echo=TRUE)
source('~/Documents/OCT_Scan/OCT_function_utils.R', echo=TRUE)
source('~/Documents/OCT_Scan/OCT_MAT_Img.R', echo=TRUE)
source('~/Documents/OCT_Scan/OCT_MAT_Img.R', echo=TRUE)
lut_16 <- matrix(
data = c(0,0,0,
1,1,171,
1,1,224,
0,110,255,
1,171,254,
1,224,254,
1,254,1,
190,255,0,
255,255,0,
255,224,0,
255,141,0,
250,94,0,
245,0,0,
245,0,172,
222,180,222),
ncol = 3, byrow = T
)
lut_16 <- rgb(lut_16, maxColorValue = 255)
source('~/Documents/OCT_Scan/OCT_function_utils.R', echo=TRUE)
source('~/Documents/OCT_Scan/OCT_MAT_Img.R', echo=TRUE)
source('~/Documents/OCT_Scan/OCT_function_utils.R', echo=TRUE)
save.image("~/Documents/OCT_Scan/OCT_Thickness.RData")
source('~/Documents/OCT_Scan/OCT_function_utils.R', echo=TRUE)
plot(colMeans(Img_list_MBR1$Day_23_26.03_))
plot(colMeans(Img_list_MBR1$Day_23_26.03_, na.rm = T))
plot(colMeans(Img_list_MBR1$Day_32_04.04_, na.rm = T))
plot(rowMeans(Img_list_MBR1$Day_32_04.04_, na.rm = T))
plot(rowMeans(Img_list_MBR1$Day_23_26.03_, na.rm = T))
plot(colMeans(Img_list_MBR1$Day_32_04.04_, na.rm = T))
plot(colMeans(Img_list_MBR1$Day_23_26.03_, na.rm = T))
img.sample <- readImage(
"/Users/chengt/Documents/OCT_Scan/Edge_Detection/Day_32_04.04_Edited_0333.tif"
)
display(img.sample)
img.median <- medianFilter(img.sample, 1)
display(img.median)
fhi <- matrix(1, nrow = 3, ncol = 3)
fhi[2, 2] <- -7.5
display(filter2(x = img.median, filter = fhi))
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
library(EBImage)
library(image.LineSegmentDetector)
library(pixmap)
library(magick)
library(image.DenoiseNLMeans)
display(img.sample)
img.median <- medianFilter(img.sample, 1)
display(img.median)
fhi <- matrix(1, nrow = 3, ncol = 3)
fhi[2, 2] <- -7.5
display(filter2(x = img.median, filter = fhi))
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
# img.median <- img.median[]
attr(img.median, 'bits.per.sample') <- 32
attr(img.median, 'samples.per.pixel') <- 1
img.median <- resize(img.median, w = 1000)
image(edge.detect(img.median))
image(edge.detect(img.median, method = 'Sobel'))
ans <- edge.detect(img.median, method = 'Sobel')
dim(ans) # 664, 156
{
nmask = thresh(img.median, w=10, h=10, offset=0.01)
# nmask = opening(nmask, makeBrush(5, shape='disc'))
# nmask = opening(nmask, makeBrush(5, shape='box'))
nmask = opening(nmask, makeBrush(5, shape='diamond'))
nmask = fillHull(nmask)
nmask = bwlabel(nmask)
display(nmask, all = T)
}
ctmask = opening(img.median>.7, makeBrush(5, shape='disc'))
cmask = propagate(img.median, seeds=nmask, mask=ctmask)
display(ctmask, all=TRUE)
segmented = paintObjects(cmask, img.median, col='#ff00ff')
segmented = paintObjects(nmask, segmented, col='#ffff00')
display(segmented, all=TRUE)
sum(ans>quantile(ans, .99))
nuc = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(nuc, method = "raster", all = TRUE)
otsu(nuc)
threshold = otsu(nuc)
threshold
nuc_th <- combine(
mapply(function(frame, th) frame > th, getFrames(nuc), threshold, SIMPLIFY=FALSE)
)
display(nuc_th, all=TRUE)
# build a filter from 1750 to 666, take average for linear purpose.
plot(c(ans[,1]))
plot(c(img.sample[,1]))
dim(img.sample) # 1750 , 725
lines(lowess(img.sample[,1], f = .3))
try_local <- img.sample[1:3,]
plot(colMeans(try_local))
lines(lowess(colMeans(try_local), f = .3))
plot(colMeans(nmask[,]))
plot(colMeans(nmask[90:100,]))
plot(nmask)
image(nmask)
image(ctmask)
fhi <- matrix(1, nrow = 3, ncol = 3)
fhi[2, 2] <- -7.5
display(filter2(x = img.median, filter = fhi))
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
??rot90c
library("EBImage")
edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
?edge.detect
??edge.detect
library('pixsets')
library('Pixsets')
library(imager)
img.sample <- readImage(
"/Users/chengt/Documents/OCT_Scan/Edge_Detection/Day_32_04.04_Edited_0333.tif"
)
display(img.sample)
img.median <- medianFilter(img.sample, 1)
display(img.median)
plot(img.median)
fhi <- matrix(1, nrow = 3, ncol = 3)
fhi[2, 2] <- -7.5
display(filter2(x = img.median, filter = fhi))
plot(filter2(x = img.median, filter = fhi))
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
library(wvtool)
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
image(edge.detect(img.median, method = 'Sobel'))
img.median <- resize(img.median, w = 1000)
img.median <- EBImage::resize(img.median, w = 1000)
library(EBImage)
library(image.LineSegmentDetector)
library(pixmap)
library(magick)
library(image.DenoiseNLMeans)
library("EBImage")
img.sample <- readImage(
"/Users/chengt/Documents/OCT_Scan/Edge_Detection/Day_32_04.04_Edited_0333.tif"
)
display(img.sample)
img.median <- medianFilter(img.sample, 1)
display(img.median)
fhi <- matrix(1, nrow = 3, ncol = 3)
fhi[2, 2] <- -7.5
plot(filter2(x = img.median, filter = fhi))
library(wvtool)
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
# img.median <- img.median[]
attr(img.median, 'bits.per.sample') <- 32
attr(img.median, 'samples.per.pixel') <- 1
image(rot90c(edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
), col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
img.median <- EBImage::resize(img.median, w = 1000)
image(edge.detect(img.median))
image(
# rot90c(
edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel"),
# ),
col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
image(
rot90c(
edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel"),
),
col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
image(
rot90c(
edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel")
),
col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
image(
# rot90c(
edge.detect(
img.median,thresh1=1, thresh2=15, noise="gaussian", noise.s=3,
method="Sobel"),
# ),
col=gray(c(0:255)/255), main="Sobel", useRaster=TRUE, axes=FALSE, asp=1)
image(edge.detect(img.median, method = 'Sobel'))
ans <- edge.detect(img.median, method = 'Sobel')
dim(ans) # 664, 156
{
nmask = thresh(img.median, w=10, h=10, offset=0.01)
# nmask = opening(nmask, makeBrush(5, shape='disc'))
# nmask = opening(nmask, makeBrush(5, shape='box'))
nmask = opening(nmask, makeBrush(5, shape='diamond'))
nmask = fillHull(nmask)
nmask = bwlabel(nmask)
display(nmask, all = T)
}
image(img.median)
plot(img.median)
plot(nmask)
install.packages("portfolioBacktest")
