?persp
load("/Users/chengt/Documents/OCT_Scan/OCT_Thickness.RData")
persp(Thickness_list_MBR1$Day_01_04.03_)
Thickness <- Thickness_list_MBR1$Day_01_04.03_
persp(Z=Thickness)
persp(z=Thickness)
contour(z=Thickness)
contour(Thickness_list_MBR2$Reactor_1_Relaxation_1_)
contour(Thickness_list_MBR2$Reactor_1_Relaxation_1_, asp = 1)
data.loess <- loess(qsec ~ wt * hp, data = mtcars)
# Create a sequence of incrementally increasing (by 0.3 units) values for both wt and hp
xgrid <-  seq(min(mtcars$wt), max(mtcars$wt), 0.3)
ygrid <-  seq(min(mtcars$hp), max(mtcars$hp), 0.3)
# Generate a dataframe with every possible combination of wt and hp
data.fit <-  expand.grid(wt = xgrid, hp = ygrid)
# Feed the dataframe into the loess model and receive a matrix output with estimates of
# acceleration for each combination of wt and hp
mtrx3d <-  predict(data.loess, newdata = data.fit)
# Abbreviated display of final matrix
mtrx3d[1:4, 1:4]
contour(x = xgrid, y = ygrid, z = mtrx3d, xlab = “Weight (1,000lbs)”, ylab = “Horsepower”)
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c(“wt”, “hp”), measure.vars = “qsec”)
names(mtrx.melt) <- c(“wt”, “hp”, “qsec”)
# Return data to numeric form
mtrx.melt$wt <- as.numeric(str_sub(mtrx.melt$wt, str_locate(mtrx.melt$wt, “=”)[1,1] + 1))
mtrx.melt$hp <- as.numeric(str_sub(mtrx.melt$hp, str_locate(mtrx.melt$hp, “=”)[1,1] + 1))
head(mtrx.melt)
data.loess <- loess(qsec ~ wt * hp, data = mtcars)
# Create a sequence of incrementally increasing (by 0.3 units) values for both wt and hp
xgrid <-  seq(min(mtcars$wt), max(mtcars$wt), 0.3)
ygrid <-  seq(min(mtcars$hp), max(mtcars$hp), 0.3)
# Generate a dataframe with every possible combination of wt and hp
data.fit <-  expand.grid(wt = xgrid, hp = ygrid)
# Feed the dataframe into the loess model and receive a matrix output with estimates of
# acceleration for each combination of wt and hp
mtrx3d <-  predict(data.loess, newdata = data.fit)
# Abbreviated display of final matrix
mtrx3d[1:4, 1:4]
contour(x = xgrid, y = ygrid, z = mtrx3d, xlab = “Weight (1,000lbs)”, ylab = “Horsepower”)
mtrx3d
dim(mtrx3d)
contour(x = xgrid, y = ygrid, z = mtrx3d, xlab = “Weight (1,000lbs)”, ylab = “Horsepower”)
contour(x = xgrid, y = ygrid, z = mtrx3d, xlab = 'Weight (1,000lbs)', ylab = 'Horsepower')
contour(x = xgrid, y = ygrid, z = mtrx3d,
xlab = 'Weight (1,000lbs)', ylab = 'Horsepower',
asp = 1)
contour(x = xgrid, y = ygrid, z = mtrx3d,
xlab = 'Weight (1,000lbs)', ylab = 'Horsepower')
contour(x = xgrid, y = ygrid, z = mtrx3d,
xlab = 'Weight (1,000lbs)', ylab = 'Horsepower')
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c(“wt”, “hp”), measure.vars = “qsec”)
library(dplyr)
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c(“wt”, “hp”), measure.vars = “qsec”)
library(reshape2)
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c(“wt”, “hp”), measure.vars = “qsec”)
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c('wt', 'hp'), measure.vars = 'qsec')
names(mtrx.melt) <- c('wt', 'hp', 'qsec')
# Return data to numeric form
mtrx.melt$wt <- as.numeric(str_sub(mtrx.melt$wt, str_locate(mtrx.melt$wt, '=')[1,1] + 1))
mtrx.melt$hp <- as.numeric(str_sub(mtrx.melt$hp, str_locate(mtrx.melt$hp, '=')[1,1] + 1))
head(mtrx.melt)
library(stringr)
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c('wt', 'hp'), measure.vars = 'qsec')
names(mtrx.melt) <- c('wt', 'hp', 'qsec')
# Return data to numeric form
mtrx.melt$wt <- as.numeric(str_sub(mtrx.melt$wt, str_locate(mtrx.melt$wt, '=')[1,1] + 1))
mtrx.melt$hp <- as.numeric(str_sub(mtrx.melt$hp, str_locate(mtrx.melt$hp, '=')[1,1] + 1))
head(mtrx.melt)
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c('wt', 'hp'), measure.vars = 'qsec')
names(mtrx.melt) <- c('wt', 'hp', 'qsec')
# Return data to numeric form
mtrx.melt$wt <- as.numeric(str_sub(mtrx.melt$wt, str_locate(mtrx.melt$wt, '=')[1,1] + 1))
mtrx.melt$hp <- as.numeric(str_sub(mtrx.melt$hp, str_locate(mtrx.melt$hp, '=')[1,1] + 1))
head(mtrx.melt)
plot1 <-
ggplot(mtrx.melt, aes(x = wt, y = hp, z = qsec)) +
stat_contour()
library(ggplot2)
plot1 <-
ggplot(mtrx.melt, aes(x = wt, y = hp, z = qsec)) +
stat_contour()
plot2 <-
ggplot(mtrx.melt, aes(x = wt, y = hp, z = qsec)) +
stat_contour(geom = “polygon”, aes(fill = ..level..)) +
geom_tile(aes(fill = qsec)) +
stat_contour(bins = 15) +
xlab(“Weight (1,000lbs)”) +
ylab(“Horsepower”) +
guides(fill = guide_colorbar(title = “¼ Mi. Time (s)”))
plot2 <-
ggplot(mtrx.melt, aes(x = wt, y = hp, z = qsec)) +
stat_contour(geom = 'polygon', aes(fill = ..level..)) +
geom_tile(aes(fill = qsec)) +
stat_contour(bins = 15) +
xlab('Weight (1,000lbs)') +
ylab('Horsepower') +
guides(fill = guide_colorbar(title = '¼ Mi. Time (s)'))
plot2
plot1
plot2 <-
ggplot(mtrx.melt, aes(x = wt, y = hp, z = qsec)) +
stat_contour(geom = 'polygon', aes(fill = ..level..)) +
geom_tile(aes(fill = qsec)) +
stat_contour(bins = 15) +
xlab('Weight (1,000lbs)') +
ylab('Horsepower') +
guides(fill = guide_colorbar(title = '¼ Mi. Time (s)'))
plot2
dim(mtrx3d)
dim(Thickness)
# Transform data to long form
Thickness_melt <- melt(Thickness, id.vars = c('x', 'y'), measure.vars = 'Thickness')
names(Thickness_melt)
dim(Thickness_melt)
names(mtrx.melt) <- c('x', 'y', 'Thickness')
head(mtrx.melt)
summary(mtrx.melt)
summary(Thickness_melt)
names(Thickness_melt) <- c('x', 'y', 'Thickness')
head(Thickness_melt)
summary(Thickness_melt)
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
stat_contour(geom = 'polygon', aes(fill = ..level..)) +
geom_tile(aes(fill = Thickness)) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
plot2 <-
ggplot(mtrx.melt, aes(x = wt, y = hp, z = qsec)) +
geom_raster(geom = 'polygon', aes(fill = ..level..)) +
geom_tile(aes(fill = qsec)) +
stat_contour(bins = 15) +
xlab('Weight (1,000lbs)') +
ylab('Horsepower') +
guides(fill = guide_colorbar(title = '¼ Mi. Time (s)'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(geom = 'polygon', aes(fill = ..level..)) +
geom_tile(aes(fill = Thickness)) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
geom_tile(aes(fill = Thickness)) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness), colours = colorRamps::matlab.like(300)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
geom_tile(aes(fill = Thickness)) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness, colours = colorRamps::matlab.like(300))) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness, colours = colorRamps::matlab.like(300))) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
limits = c(
max(round(min(Img_3D_grid$Z) - 20, digits = -1), 0),
max(round(min(Img_3D_grid$Z) - 20, digits = -1), 0) +
scale_range
),
colours = colorRamps::matlab.like(300)
) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness, colours = colorRamps::matlab.like(300))) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
# stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
# Transform data to long form
Thickness <- Thickness_list_MBR2$Reactor_1_Relaxation_1_
Thickness_melt <- melt(Thickness, id.vars = c('x', 'y'), measure.vars = 'Thickness')
names(Thickness_melt) <- c('x', 'y', 'Thickness')
# Return data to numeric form
head(Thickness_melt)
{
# Transform data to long form
Thickness <- Thickness_list_MBR2$Reactor_1_Relaxation_1_
Thickness_melt <- melt(Thickness, id.vars = c('x', 'y'), measure.vars = 'Thickness')
names(Thickness_melt) <- c('x', 'y', 'Thickness')
Thickness_melt$x <- Thickness_melt$x / 666 * 4
Thickness_melt$y <- Thickness_melt$y / 666 * 4
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
# stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
}
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
stat_contour(bins = 15) +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
stat_contour(bins = 15, colour = 'white') +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness'))
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
# stat_contour(geom = 'polygon', aes(fill = ..level..)) +
# geom_tile(aes(fill = Thickness)) +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
stat_contour(bins = 15, colour = 'white') +
xlab('x') +
ylab('y') +
guides(fill = guide_colorbar(title = 'Thickness')) +
ggplot2::theme_bw()
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
stat_contour(bins = 15, colour = 'white') +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
ggplot2::coord_fixed() +
ggplot2::labs(
title = Fig_Title,
x = 'X (mm)',
y = 'Y (mm)',
fill = paste('Thickness\n(\u03BCm)', sep = '')
) +
ggplot2::theme_bw()
ggplot(Thickness_melt, aes(x = x, y = y, z = Thickness)) +
geom_raster(aes(fill = Thickness)) +
stat_contour(bins = 15, colour = 'white') +
ggplot2::scale_fill_gradientn(
colours = colorRamps::matlab.like(300)
) +
ggplot2::coord_fixed() +
ggplot2::labs(
# title = Fig_Title,
x = 'X (mm)',
y = 'Y (mm)',
fill = paste('Thickness\n(\u03BCm)', sep = '')
) +
ggplot2::theme_bw()
sin(5)
sin(5)
