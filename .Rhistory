# Imputation --------------------------------------------------------------
# Impute based on realized features,
# for further prediction/regression/classification
if (1) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
set.seed(2019)
tictoc::tic('Imputation...')
ts_imputed <- data.frame(Date = 1:NROW(ts_raw), ts_raw)
ts_amelia <- amelia(
x = ts_imputed,
m = 100,
p2s = 1,
ts = 'Date',
polytime = 3,
splinetime = 3,
# lags = setdiff(colnames(ts_imputed), 'Date'),
# leads = setdiff(colnames(ts_imputed), 'Date'),
logs = setdiff(colnames(ts_imputed), 'Date'),
max.resample = Inf,
parallel = 'multicore',
ncpus = 8)
ts_imputed <-
Reduce('+', ts_amelia$imputations) / length(ts_amelia$imputations)
ts_imputed <- ts_imputed[setdiff(colnames(ts_imputed), 'Date')]
ts_imputed <- xts(ts_imputed,
order.by = as.Date(rownames(ts_imputed)))
tictoc::toc()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
}
dim(ts_raw)
head(ts_raw)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
Get_Features <- function(ohlcv, n_laggedreturn = 2, n_momentum = 5) {
# Close Price
ohlc <- na.omit(OHLC(ohlcv))
ohlc <- ohlc[ohlc[, 1]!=0, ]
hlc <- HLC(ohlc)
Price <- Cl(ohlc)
names(Price) <- gsub(pattern = '.Close',
replacement = '',
x = names(Price))
# Return Sign
ReturnSign <- sign(
diff(Price, log = T)
)
names(ReturnSign) <- paste0(names(Price), '.ReturnSign')
# Lagged Returns
LaggedReturn <- diff(Price, lag = 1, log = T)
if (n_laggedreturn > 1) {
for (iter_i in 2:n_laggedreturn) {
LaggedReturn <- merge.xts(
LaggedReturn,
diff(Price, lag = iter_i, log = T)
)
}
}
names(LaggedReturn) <- paste(names(Price), 1:n_laggedreturn,
sep = '.LaggedReturn.')
# Momentum
Momentum <- diff(Price, lag = 2, arithmetic = T)
if (n_momentum > 2) {
for (iter_i in 3:n_momentum) {
Momentum <- merge.xts(
Momentum,
diff(Price, lag = iter_i, arithmetic = T)
)
}
}
names(Momentum) <- paste(names(Price), 2:n_momentum,
sep = '.Momentum.')
# MA
SMA <- SMA(Price, n = 10)
EMA <- EMA(Price, n = 10)
names(SMA) <- paste0(names(Price), '.SMA')
names(EMA) <- paste0(names(Price), '.EMA')
# Others
RSI <- RSI(Price, n = 14)
SMI <- SMI(HLC = hlc, nFast = 2, nSlow = 25)$SMI
MACD <- MACD(Price, nFast = 12, nSlow = 26)$macd
CCI <- CCI(HLC = hlc, n = 20)
AD <- williamsAD(HLC = hlc)
names(RSI) <- paste0(names(Price), '.RSI')
names(SMI) <- paste0(names(Price), '.SMI')
names(MACD) <- paste0(names(Price), '.MACD')
names(CCI) <- paste0(names(Price), '.CCI')
names(AD) <- paste0(names(Price), '.AD')
# Others cond.
WPR <- WPR(HLC = hlc, n = 14)
VHF <- VHF(Price, n = 14)
volatility <- volatility(OHLC = ohlc, calc = 'gk.yz')
names(WPR) <- paste0(names(Price), '.WPR')
names(VHF) <- paste0(names(Price), '.VHF')
names(volatility) <- paste0(names(Price), '.volatility')
#
result <-
merge.xts(OHLC(ohlcv),
ReturnSign,
LaggedReturn,
Momentum,
SMA, EMA,
RSI, SMI, MACD, CCI, AD,
WPR, VHF, volatility)
return(result)
}
# Features Computation ----------------------------------------------------
# Compute features based on realized values
if (0) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
Get_Features <- function(ohlcv, n_laggedreturn = 2, n_momentum = 5) {
# Close Price
ohlc <- na.omit(OHLC(ohlcv))
ohlc <- ohlc[ohlc[, 1]!=0, ]
hlc <- HLC(ohlc)
Price <- Cl(ohlc)
names(Price) <- gsub(pattern = '.Close',
replacement = '',
x = names(Price))
# Return Sign
ReturnSign <- sign(
diff(Price, log = T)
)
names(ReturnSign) <- paste0(names(Price), '.ReturnSign')
# Lagged Returns
LaggedReturn <- diff(Price, lag = 1, log = T)
if (n_laggedreturn > 1) {
for (iter_i in 2:n_laggedreturn) {
LaggedReturn <- merge.xts(
LaggedReturn,
diff(Price, lag = iter_i, log = T)
)
}
}
names(LaggedReturn) <- paste(names(Price), 1:n_laggedreturn,
sep = '.LaggedReturn.')
# Momentum
Momentum <- diff(Price, lag = 2, arithmetic = T)
if (n_momentum > 2) {
for (iter_i in 3:n_momentum) {
Momentum <- merge.xts(
Momentum,
diff(Price, lag = iter_i, arithmetic = T)
)
}
}
names(Momentum) <- paste(names(Price), 2:n_momentum,
sep = '.Momentum.')
# MA
SMA <- SMA(Price, n = 10)
EMA <- EMA(Price, n = 10)
names(SMA) <- paste0(names(Price), '.SMA')
names(EMA) <- paste0(names(Price), '.EMA')
# Others
RSI <- RSI(Price, n = 14)
SMI <- SMI(HLC = hlc, nFast = 2, nSlow = 25)$SMI
MACD <- MACD(Price, nFast = 12, nSlow = 26)$macd
CCI <- CCI(HLC = hlc, n = 20)
AD <- williamsAD(HLC = hlc)
names(RSI) <- paste0(names(Price), '.RSI')
names(SMI) <- paste0(names(Price), '.SMI')
names(MACD) <- paste0(names(Price), '.MACD')
names(CCI) <- paste0(names(Price), '.CCI')
names(AD) <- paste0(names(Price), '.AD')
# Others cond.
WPR <- WPR(HLC = hlc, n = 14)
VHF <- VHF(Price, n = 14)
volatility <- volatility(OHLC = ohlc, calc = 'gk.yz')
names(WPR) <- paste0(names(Price), '.WPR')
names(VHF) <- paste0(names(Price), '.VHF')
names(volatility) <- paste0(names(Price), '.volatility')
#
result <-
merge.xts(OHLC(ohlcv),
ReturnSign,
LaggedReturn,
Momentum,
SMA, EMA,
RSI, SMI, MACD, CCI, AD,
WPR, VHF, volatility)
return(result)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
Symbols <- c('KSA', '^GSPC', '^DJI', '^FTSE', '^N225')
getSymbols(Symbols = Symbols, src = "yahoo")
Symbols <- gsub("[[:punct:]]", "", Symbols)
for (iter_i in Symbols) {
print(iter_i)
assign(
iter_i,
Get_Features(
get(iter_i),
n_laggedreturn = 5,
n_momentum = 5
)
)
}
ts_raw <- merge.xts(
KSA,
GSPC,
DJI,
FTSE,
N225
)
ts_raw <- ts_raw['2015-11-10/2019-11-10', ]
rm(list = Symbols, iter_i)
}
# Features Computation ----------------------------------------------------
# Compute features based on realized values
if (1) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
Get_Features <- function(ohlcv, n_laggedreturn = 2, n_momentum = 5) {
# Close Price
ohlc <- na.omit(OHLC(ohlcv))
ohlc <- ohlc[ohlc[, 1]!=0, ]
hlc <- HLC(ohlc)
Price <- Cl(ohlc)
names(Price) <- gsub(pattern = '.Close',
replacement = '',
x = names(Price))
# Return Sign
ReturnSign <- sign(
diff(Price, log = T)
)
names(ReturnSign) <- paste0(names(Price), '.ReturnSign')
# Lagged Returns
LaggedReturn <- diff(Price, lag = 1, log = T)
if (n_laggedreturn > 1) {
for (iter_i in 2:n_laggedreturn) {
LaggedReturn <- merge.xts(
LaggedReturn,
diff(Price, lag = iter_i, log = T)
)
}
}
names(LaggedReturn) <- paste(names(Price), 1:n_laggedreturn,
sep = '.LaggedReturn.')
# Momentum
Momentum <- diff(Price, lag = 2, arithmetic = T)
if (n_momentum > 2) {
for (iter_i in 3:n_momentum) {
Momentum <- merge.xts(
Momentum,
diff(Price, lag = iter_i, arithmetic = T)
)
}
}
names(Momentum) <- paste(names(Price), 2:n_momentum,
sep = '.Momentum.')
# MA
SMA <- SMA(Price, n = 10)
EMA <- EMA(Price, n = 10)
names(SMA) <- paste0(names(Price), '.SMA')
names(EMA) <- paste0(names(Price), '.EMA')
# Others
RSI <- RSI(Price, n = 14)
SMI <- SMI(HLC = hlc, nFast = 2, nSlow = 25)$SMI
MACD <- MACD(Price, nFast = 12, nSlow = 26)$macd
CCI <- CCI(HLC = hlc, n = 20)
AD <- williamsAD(HLC = hlc)
names(RSI) <- paste0(names(Price), '.RSI')
names(SMI) <- paste0(names(Price), '.SMI')
names(MACD) <- paste0(names(Price), '.MACD')
names(CCI) <- paste0(names(Price), '.CCI')
names(AD) <- paste0(names(Price), '.AD')
# Others cond.
WPR <- WPR(HLC = hlc, n = 14)
VHF <- VHF(Price, n = 14)
volatility <- volatility(OHLC = ohlc, calc = 'gk.yz')
names(WPR) <- paste0(names(Price), '.WPR')
names(VHF) <- paste0(names(Price), '.VHF')
names(volatility) <- paste0(names(Price), '.volatility')
#
result <-
merge.xts(OHLC(ohlcv),
ReturnSign,
LaggedReturn,
Momentum,
SMA, EMA,
RSI, SMI, MACD, CCI, AD,
WPR, VHF, volatility)
return(result)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
Symbols <- c('KSA', '^GSPC', '^DJI', '^FTSE', '^N225')
getSymbols(Symbols = Symbols, src = "yahoo")
Symbols <- gsub("[[:punct:]]", "", Symbols)
for (iter_i in Symbols) {
print(iter_i)
assign(
iter_i,
Get_Features(
get(iter_i),
n_laggedreturn = 5,
n_momentum = 5
)
)
}
ts_raw <- merge.xts(
KSA,
GSPC,
DJI,
FTSE,
N225
)
ts_raw <- ts_raw['2015-11-10/2019-11-10', ]
rm(list = Symbols, iter_i)
}
# Imputation --------------------------------------------------------------
# Impute based on realized features,
# for further prediction/regression/classification
if (1) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
set.seed(2019)
tictoc::tic('Imputation...')
ts_imputed <- data.frame(Date = 1:NROW(ts_raw), ts_raw)
ts_amelia <- amelia(
x = ts_imputed,
m = 12,
p2s = 1,
ts = 'Date',
polytime = 3,
splinetime = 3,
# lags = setdiff(colnames(ts_imputed), 'Date'),
# leads = setdiff(colnames(ts_imputed), 'Date'),
logs = setdiff(colnames(ts_imputed), 'Date'),
max.resample = Inf,
parallel = 'multicore',
ncpus = 8)
ts_imputed <-
Reduce('+', ts_amelia$imputations) / length(ts_amelia$imputations)
ts_imputed <- ts_imputed[setdiff(colnames(ts_imputed), 'Date')]
ts_imputed <- xts(ts_imputed,
order.by = as.Date(rownames(ts_imputed)))
tictoc::toc()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
}
