multiplier_pixel2micron = 2.1,
flag_ex_extreme_value = TRUE,
loess_span = .02,
quantiles = c(.027, .97),
Remove_Consecutive_NA = Remove_Consecutive_NA,
n_row = 666
) {
# print(paste0('Processing ', Fig_Title, '...'))
Thickness <- Img_3D
# From pixels to microns
Thickness <- Thickness * multiplier_pixel2micron
# rm(Img_3D)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Cropping for denoise_type 2
if (denoise_type %in% 2:3) {
fit_ref <- rowMeans(Thickness)
fit_loess <- loess(y~x,
data.frame(x = 1:n_row, y = fit_ref),
na.action = na.omit,
span = .6)
threshold_row <-
mean(Thickness, na.rm = T) + predict(fit_loess, 1:n_row) - 2 * fit_ref
Thickness[fit_ref < threshold_row, ] <- NA
# threshold_row <- predict(fit_loess, 1:n_row) + fit_ref
# Thickness[fit_ref > threshold_row, ] <- NA
#
fit_ref <- rowMeans(Thickness)
fit_loess <- loess(y~x,
data.frame(x = 1:n_row, y = fit_ref),
na.action = na.omit,
span = 1/2)
threshold_row <-
.6 * mean(Thickness, na.rm = T) +
.4 * predict(fit_loess, 1:n_row) -
sd(fit_ref, na.rm = T) * 1.732
Thickness[fit_ref < threshold_row, ] <- NA
threshold_row <- predict(fit_loess, 1:n_row) + sd(fit_ref, na.rm = T) * sqrt(5)
Thickness[fit_ref > threshold_row, ] <- NA
}
# rm too much NA
Thickness <- Remove_Consecutive_NA(Thickness = Thickness)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (flag_ex_extreme_value) {
# To exclude extreme values
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 5/10^4, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-1/10^4, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
# rm(Thickness_wo_Extreme, maximum, minimum)
}
# Specials
# quantile(Img_list_MBR1$Day_49_21.04_, na.rm = T,
# probs = seq(from = 0 , to = 1, by = .01))
if (Fig_Title %in%
c(
'Day_32_04.04_Relaxation_1', 'Day_35_07.04_Relaxation_2',
'Day_37_09.04_Relaxation_2', 'Day_40_12.04_Relaxation_2',
'Day_42_14.04_Relaxation_2'
)
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 5/10^2, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-1/10^4, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
}
if (Fig_Title %in% c('Day_44_16.04_Air_Scouring', 'Day_46_18.04_Air_Scouring')
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 5/10^2, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-5/10^3, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
}
if (Fig_Title %in% c('Day_49_21.04_Air_Scouring')
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 5/10^2, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-1/10^5, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (Fig_Title %in% c('Reactor_1_Relaxation_Day_3',
'Reactor_1_Relaxation_Day_4')
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 1/10^2, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-2/10^3, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
}
if (Fig_Title %in% c('Reactor_1_Relaxation_Day_34')
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 3/10^2, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-5/10^2, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
Thickness <- Remove_Consecutive_NA(Thickness)
}
if (Fig_Title %in% c('Reactor_2_Air_Scouring_Day_4',
'Reactor_2_Air_Scouring_Day_12')
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 5/10^3, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-1/10^2, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
}
if (Fig_Title %in% c('Reactor_2_Air_Scouring_Day_34',
'Reactor_2_Air_Scouring_Autopsy_2')
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 5/10^3, na.rm = T),
0)
maximum <- quantile(Thickness, probs = 1-3/10^2, na.rm = T)
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
}
if (Fig_Title %in% c('Reactor_3_Relaxation_Air_Scouring_Autopsy_3')
) {
Thickness_wo_Extreme <- Thickness
minimum <- max(
quantile(Thickness, probs = 5/10^3, na.rm = T),
0)
maximum <- 40
Thickness_wo_Extreme[Thickness_wo_Extreme < minimum] <- NA
Thickness_wo_Extreme[Thickness_wo_Extreme > maximum] <- NA
Thickness <- Thickness_wo_Extreme
Thickness <- Remove_Consecutive_NA(Thickness)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Imputation
if (sum(is.na(Thickness))>0) {
Img_3D_grid <- expand.grid(
X = seq_len(NCOL(Thickness)),
Y = seq_len(NROW(Thickness))
)
Img_3D_grid$Z <- c(t(Thickness))
Img_3D_grid$X <- Img_3D_grid$X
Img_3D_grid$Y <- Img_3D_grid$Y
# loess
fit_loess <- loess(
Z~., Img_3D_grid,
span = loess_span,
na.action = na.omit,
degree = 2, family = 'symmetric',
control = loess.control(
trace.hat = 'approximate'
)
)
#
# GAM
# fit_gam <- mgcv::gam(
#     Z ~ te(X, bs = 'cr', k = 30, m = 30) +
#         te(Y, bs = 'cr', k = 30, m = 30) +
#         t2(X, Y, bs = c('ds', 'ds')),
#     # Z ~ te(X, bs = 'cc') + te(Y, bs = 'cc') + s(X, Y, bs = 'sos'),
#     data = Img_3D_grid, na.action = na.omit,
#     # method = 'REML',
#     control = list(nthreads = parallel::detectCores()),
#     family = gaussian()
# )
# vis.gam(fit_gam, n.grid = 600, plot.type = 'contour')
# summary(fit_gam)
#
index_na <- is.na(Thickness)
fit_loess <- t(predict(fit_loess, newdata = Img_3D_grid))
Thickness[index_na] <- fit_loess[index_na]
#
# Img_3D_grid[index_na, 'Z'] <- predict(fit_gam, Img_3D_grid[index_na, ])
# Thickness <- xtabs(Z ~ X + Y, data = Img_3D_grid)
#
# Resize to 666*666
# Thickness <- EBImage::resize(Thickness, w = 666, h = 666)
# rm(Img_3D_grid)
}
# a final assurance
Thickness <- na.omit(Thickness)
# Resize to 666*666
Thickness <- EBImage::resize(Thickness, w = 666, h = 666)
# Filter
if (denoise_type %in% 1:2) {
Thickness <- waveslim::denoise.modwt.2d(Thickness)
Thickness <- waveslim::denoise.modwt.2d(Thickness)
Thickness_max <- max(Thickness)
Thickness <- EBImage::medianFilter(
Thickness/Thickness_max, size = 1) * Thickness_max
Thickness_max <- max(Thickness)
Thickness <- EBImage::medianFilter(
Thickness/Thickness_max, size = pi) * Thickness_max
# rm(Thickness_max)
}
if (denoise_type %in% 3) {
Thickness <- waveslim::denoise.modwt.2d(Thickness)
Thickness <- waveslim::denoise.modwt.2d(Thickness)
Thickness_max <- max(Thickness)
Thickness <- EBImage::medianFilter(
Thickness/Thickness_max, size = 1) * Thickness_max
Thickness_max <- max(Thickness)
Thickness <- EBImage::medianFilter(
Thickness/Thickness_max, size = pi) * Thickness_max
}
if (flag_ex_extreme_value) {
# To exclude extreme values
Thickness_wo_Extreme <- Thickness
minimum <- max(quantile(Thickness, probs = quantiles[1]),
0)
maximum <- quantile(Thickness, probs = quantiles[2])
Thickness_wo_Extreme[Thickness_wo_Extreme<minimum] <- minimum
Thickness_wo_Extreme[Thickness_wo_Extreme>maximum] <- maximum
Thickness <- Thickness_wo_Extreme
# rm(Thickness_wo_Extreme, maximum, minimum)
}
return(Thickness)
}
seq_list <- as.list(as.data.frame(t(df_Time_81221), stringsAsFactors = F))
names(seq_list) <- df_Time_81221$seq_Fig_Index
#
# seq_list <- seq_list[c(14:21,36)]
#
print(Sys.time())
print(names(seq_list))
#
para_socket_cl <- makeCluster(parallel::detectCores())
registerDoParallel(para_socket_cl)
# llply version
Thickness_list_Time_81221 <- llply(
.data = seq_list,
.fun = function(
iter_i, Img_list, Img_Processing, NA_Action
){
return(
Img_Processing(
Img_3D = Img_list[[iter_i[1]]],
Fig_Title = iter_i[2],
denoise_type = as.numeric(iter_i[3]),
multiplier_pixel2micron = 2.1,
flag_ex_extreme_value = T,
loess_span = as.numeric(iter_i[4]),
quantiles = c(as.numeric(iter_i[5]), as.numeric(iter_i[6])),
Remove_Consecutive_NA = NA_Action
)
)
},
.inform = T,
.parallel = T,
# .progress = 'time',
Img_list = Img_list_Time_81221,
Img_Processing = Impute_Filter_Image_from_Matrix,
NA_Action = Remove_Consecutive_NA
)
stopCluster(para_socket_cl)
stopCluster(para_socket_cl)
seq_list <- as.list(as.data.frame(t(df_Time_81221), stringsAsFactors = F))
names(seq_list) <- df_Time_81221$seq_Fig_Index
#
# seq_list <- seq_list[c(14:21,36)]
#
print(Sys.time())
print(names(seq_list))
#
para_socket_cl <- makeCluster(parallel::detectCores())
registerDoParallel(para_socket_cl)
# llply version
Thickness_list_Time_81221 <- llply(
.data = seq_list,
.fun = function(
iter_i, Img_list, Img_Processing, NA_Action
){
return(
Img_Processing(
Img_3D = Img_list[[iter_i[1]]],
Fig_Title = iter_i[2],
denoise_type = as.numeric(iter_i[3]),
multiplier_pixel2micron = 2.1,
flag_ex_extreme_value = T,
loess_span = as.numeric(iter_i[4]),
quantiles = c(as.numeric(iter_i[5]), as.numeric(iter_i[6])),
Remove_Consecutive_NA = NA_Action,
n_row = 800
)
)
},
.inform = T,
.parallel = T,
# .progress = 'time',
Img_list = Img_list_Time_81221,
Img_Processing = Impute_Filter_Image_from_Matrix,
NA_Action = Remove_Consecutive_NA
)
#
rm(seq_list)
stopCluster(para_socket_cl)
print(Sys.time())
tictoc::toc()
seqlist
seq_list <- as.list(as.data.frame(t(df_Time_81221), stringsAsFactors = F))
names(seq_list) <- df_Time_81221$seq_Fig_Index
seq_list
Img_list_Time_81221 %>% names()
# Hyperparameters ---------------------------------------------------------
df_Time_81221 <- data.frame(
seq_Fig_Index = c(paste0('Time_', c(8, 12, 21))),
seq_Fig_Title = c(
paste0('Time_',
stringr::str_pad(
c(8, 12, 21),
width = 2, pad = '0')
)
),
seq_Denoise_Type = 2,
seq_Loess_Span = rep(0.02, 3),
seq_Quantile_Min = rep(.01, 3),
seq_Quantile_Max = rep(.999, 3),
seq_mean_aim = NA,
seq_sd_aim = NA,
stringsAsFactors = F
)
# str(Img_list_Time_81221)
if (1) {
tictoc::tic('Interpolation & Filtering, Time_81221')
seq_list <- as.list(as.data.frame(t(df_Time_81221), stringsAsFactors = F))
names(seq_list) <- df_Time_81221$seq_Fig_Index
#
# seq_list <- seq_list[c(14:21,36)]
#
print(Sys.time())
print(names(seq_list))
#
para_socket_cl <- makeCluster(parallel::detectCores())
registerDoParallel(para_socket_cl)
# llply version
Thickness_list_Time_81221 <- llply(
.data = seq_list,
.fun = function(
iter_i, Img_list, Img_Processing, NA_Action
){
return(
Img_Processing(
Img_3D = Img_list[[iter_i[1]]],
Fig_Title = iter_i[2],
denoise_type = as.numeric(iter_i[3]),
multiplier_pixel2micron = 2.1,
flag_ex_extreme_value = T,
loess_span = as.numeric(iter_i[4]),
quantiles = c(as.numeric(iter_i[5]), as.numeric(iter_i[6])),
Remove_Consecutive_NA = NA_Action,
n_row = 800
)
)
},
.inform = T,
.parallel = T,
# .progress = 'time',
Img_list = Img_list_Time_81221,
Img_Processing = Impute_Filter_Image_from_Matrix,
NA_Action = Remove_Consecutive_NA
)
#
rm(seq_list)
stopCluster(para_socket_cl)
print(Sys.time())
tictoc::toc()
}
Thickness_list_Time_81221 %>%str
source('/Users/chengt/Documents/OCT_Scan/OCT_function_utils.R')
# GGplot llply version, Time_81221
if (1) {
tictoc::tic('Plotting, Time_81221')
seq_list <- seq_along(Thickness_list_Time_81221)
names(seq_list) <- names(Thickness_list_Time_81221[seq_list])
#
print(Sys.time())
print(names(seq_list))
para_socket_cl <- makeCluster(parallel::detectCores())
registerDoParallel(para_socket_cl)
#
invisible(
llply(
.data = seq_list,
.fun = function(
i,
Plot_Thickness,
Thickness_list,
df_hyper
){
Plot_Thickness(
Thickness = Thickness_list[[i]],
scale_range = NULL,
Fig_Title = df_hyper$seq_Fig_Title[i],
flag_plot = F,
x_in_mm = 8,
y_in_mm = 8,
flag_save_plot = T,
save_folder = '/Users/chengt/Documents/OCT_Scan/Img/Time_81221/Default/'
)
},
.parallel = T,
# .progress = 'time',
Plot_Thickness = Plot_Thickness,
Thickness_list = Thickness_list_Time_81221,
df_hyper = df_Time_81221
)
)
#
rm(seq_list)
stopCluster(para_socket_cl)
print(Sys.time())
tictoc::toc()
}
# Thickness & Roughness ---------------------------------------------------
# In um
df_describe <- llply(
.data = names(Img_list_Time_81221),
.fun = function(iter_name) {
iter_df <- psych::describe(c(Img_list_Time_81221[[iter_name]]) *
# # # # # # # # # # # # # # # #
2.1 # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # #
)
rownames(iter_df) <- iter_name
return(iter_df)
}
)
df_describe <- Reduce(rbind, df_describe)
df_describe
stopCluster(para_socket_cl)
stopCluster(para_socket_cl)
stopCluster(para_socket_cl)
stopCluster(para_socket_cl)
# GGplot llply version, Time_81221
if (1) {
tictoc::tic('Plotting, Time_81221')
seq_list <- seq_along(Thickness_list_Time_81221)
names(seq_list) <- names(Thickness_list_Time_81221[seq_list])
#
print(Sys.time())
print(names(seq_list))
para_socket_cl <- makeCluster(parallel::detectCores())
registerDoParallel(para_socket_cl)
#
invisible(
llply(
.data = seq_list,
.fun = function(
i,
Plot_Thickness,
Thickness_list,
df_hyper
){
Plot_Thickness(
Thickness = Thickness_list[[i]],
scale_range = NULL,
Fig_Title = df_hyper$seq_Fig_Title[i],
flag_plot = F,
x_in_mm = 8,
y_in_mm = 8,
flag_save_plot = T,
save_folder = '/Users/chengt/Documents/OCT_Scan/Img/Time_81221/Default/'
)
},
.parallel = T,
# .progress = 'time',
Plot_Thickness = Plot_Thickness,
Thickness_list = Thickness_list_Time_81221,
df_hyper = df_Time_81221
)
)
#
rm(seq_list)
stopCluster(para_socket_cl)
print(Sys.time())
tictoc::toc()
}
Img_list_Time_81221 %>% head
Img_list_Time_81221 %>% str
Thickness_list_Time_81221 %>% str
df_describe
save.image("~/Documents/OCT_Scan/wetransfer-75b0cb/OCT_wetransfer.RData")
setwd(dir = '~/Documents/OCT_Scan/wetransfer-75b0cb/')
